/**
 * \ingroup Manual
 * \addtogroup FirstSteps
 *
 * This module is a step by step guide on how to implement, compile and to extend a DES-SERT based daemon with routing logic. This module provides following parts:
 *
 * - \ref sec_fs_rlogic_lsr
 * - \ref sec_fs_rlogic_coldataneigh
 * - \ref sec_fs_rlogic_floodnetw
 * - \ref sec_fs_rlogic_fillrouting
 * - \ref sec_fs_rlogic_expcode
 * - \ref sec_fs_rlogic_deslsrc
 * - \ref sec_fs_rlogic_deslsrh
 * - \ref sec_fs_rlogic_deslsritemsh
 * - \ref sec_fs_rlogic_deslsrphc
 * - \ref sec_fs_rlogic_deslsrrlc
 * - \ref sec_fs_rlogic_deslsrdij
 * - \ref sec_fs_rlogic_deslsrcli
 *
 * @section sec_fs_rlogic_lsr The link state routing protocol
 *
 * For our tutorial we implement a simple link-state routing protocol.
 * The basic concept of this routing protocol is that every deamon constructs a graph that represents the network based on neighborhood information.
 *
 * In link-state routing protocols only neighborhood information is flooded over the network.
 * So we can summarize the task of every router as "tell the world, who your neighbors are".
 * When the dissemination of the data succeeds, every router has a complete graph of the network.
 *
 * @section sec_fs_rlogic_coldataneigh Neighbor discovery
 *
 * First of all, each node needs to discover its neighbors.
 * This is necessary since there are no information about the network when we are in the initial state.
 * To discover neighbors, each router sends "hello" packets.
 * The packets will not be forwarded and are thus dropped when they have been received and evaluated.
 *
 * @section sec_fs_rlogic_floodnetw Dissemination of neighbohood information
 *
 * We assume that the neighbor discovery is running and neighbors have been found.
 * This information is important for all other routers in the network to create the graph of the network.
 * Therfore, we have to flood our neighborhood information over the whole network.
 *
 * @section sec_fs_rlogic_fillrouting Create routing table based on the network topology
 *
 * When the first two task are successfully run, routing information has to be input into the routing table.
 *
 * - mac address: hardware address of the destination node
 * - next hop: address of the router that is the next hop on the route to the destination
 * - distance: the distance respectively the cost to reach the destination (depends on the used routing metric, example: hop count)
 *
 * @section sec_fs_rlogic_expcode Structure of the source code
 *
 * The example link state daemon will by split in the following parts/files:
 * - des-lsr.c
 * - des-lsr.h
 * - des-lsr_items.h
 * - des-lsr_packethandler.c
 * - des-lsr_routinglogic.c
 * - des-lsr_dijkstra.c
 * - des-lsr_cli.c
 *
 * Flags and prototypes are defined in the des-lsr.h header file, the „main header“.
 * The second header file called des-lsr_items.h will contain data structures to store information about the neighbors and the routing table.
 *
 * The most important file of our project is des-lsr_routinglogic.c.
 * Here you can find callbacks for periodic tasks and the handling of packets.
 * Incoming or outgoing packets are evaluated and processed here.
 *
 * @section sec_fs_rlogic_deslsrc Explaining the code - des-lsr.c
 *
 * First have a look on the des-lsr.c file, contains the entry point into our program.
 *
 * @code
 * // --- LIBRARIES --- //
 * #include "des-lsr.h"
 * #include "des-lsr_items.h"
 * 
 * // --- DAEMON INITIALIZATION --- //
 * int main (int argc, char** argv) {
 * 	// initialize daemon with correct parameters
 * 	FILE *cfg = NULL;
 * 	if ((argc == 2) && (strcmp(argv[1], "-nondaemonize") == 0)) {
 * 		dessert_info("starting LSR in non daemonize mode");
 * 		dessert_init("LSR", 0x02, DESSERT_OPT_NODAEMONIZE);
		char cfg_file_name[] = "/etc/des-lsr.conf";
 * 		cfg = fopen(cfg_file_name, "r");
 * 		if (cfg == NULL) {
 * 			printf("Config file '%s' not found. Exit... \n", cfg_file_name);
 * 			return EXIT_FAILURE;
 * 		}
 * 	} else {
 * 		dessert_info("starting LSR in daemonize mode");
 * 		cfg = dessert_cli_get_cfg(argc, argv);
 * 		dessert_init("LSR", 0x03, DESSERT_OPT_NODAEMONIZE);
 * 	}
 * 
 * 	// periodic function initialization
 * 	init_logic();
 * 
 * 	// logging initialization
 * 	dessert_logcfg(DESSERT_LOG_STDERR);
 * 
 * 	// cli initialization
 * 	cli_register_command(dessert_cli, dessert_cli_cfg_iface, "sys", dessert_cli_cmd_addsysif, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "initialize sys interface");
 * 	cli_register_command(dessert_cli, dessert_cli_cfg_iface, "mesh", dessert_cli_cmd_addmeshif, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "initialize mesh interface");
 * 
 * 	struct cli_command* cli_cfg_set = cli_register_command(dessert_cli, NULL, "set", NULL, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set variable");
 * 	cli_register_command(dessert_cli, cli_cfg_set, "hello_interval", cli_set_hello_interval, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set HELLO packet interval");
 * 	cli_register_command(dessert_cli, dessert_cli_show, "hello_interval", cli_show_hello_interval, PRIVILEGE_UNPRIVILEGED, MODE_EXEC, "show HELLO packet size");
 * 	cli_register_command(dessert_cli, cli_cfg_set, "tc_interval", cli_set_tc_interval, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set TC packet interval");
 * 	cli_register_command(dessert_cli, dessert_cli_show, "tc_interval", cli_show_tc_interval, PRIVILEGE_UNPRIVILEGED, MODE_EXEC, "show TC packet size");
 * 	cli_register_command(dessert_cli, cli_cfg_set, "refresh_list", cli_set_refresh_list, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set refresh NH interval");
 * 	cli_register_command(dessert_cli, dessert_cli_show, "refresh_list", cli_show_refresh_list, PRIVILEGE_UNPRIVILEGED, MODE_EXEC, "show refresh NH interval");
 * 	cli_register_command(dessert_cli, cli_cfg_set, "refresh_rt", cli_set_refresh_rt, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set refresh RT interval");
 * 	cli_register_command(dessert_cli, dessert_cli_show, "refresh_rt", cli_show_refresh_rt, PRIVILEGE_UNPRIVILEGED, MODE_EXEC, "show refresh RT interval");
 * 	cli_register_command(dessert_cli, dessert_cli_show, "rt", cli_show_rt, PRIVILEGE_UNPRIVILEGED, MODE_EXEC, "show RT");
 * 
 * 	// callback registration
 * 	dessert_sysrxcb_add(sys_to_mesh, 10);
 * 	dessert_meshrxcb_add(dessert_msg_ifaceflags_cb, 20);
 * 	dessert_meshrxcb_add(drop_errors, 30);
 * 	dessert_meshrxcb_add(process_hello, 40);
 * 	dessert_meshrxcb_add(process_tc, 50);
 * 	dessert_meshrxcb_add(forward_packet, 60);
 * 	dessert_meshrxcb_add(mesh_to_sys, 70);
 * 
 * 	// running cli & daemon
 * 	cli_file(dessert_cli, cfg, PRIVILEGE_PRIVILEGED, MODE_CONFIG);
 * 	dessert_cli_run();
 * 	dessert_run();
 * 	return (0);
 * }
 * 
 * @endcode
 *
 * This function is indeed similar to the main function of the basic daemon that we have discussed.
 * The configuration is read from a file, parsed, and evaluated.
 * The routing logic is initialized and the function dessert_info is used to print a log message with level info.
 *
 * @code
 * init_logic();
 * @endcode
 *
 * Now the routing protocol will start its work but some additional work is required that will be discussed later.
 * The rest of the code is similar to the basic daemon.
 *
 * As we have discussed in the introduction of the link state routing algorithm, every router has to handle incoming hello, tc (topology control), and normal data packets.
 * For both tasks we register a specific callback function.
 *
 * @section sec_fs_rlogic_deslsrh Explaining the code - des-lsr.h
 *
 * In this header file we have some constants and prototypes.
 *
 * @code
 * #include <dessert.h>
 * #include <libcli.h>
 * 
 * // CONSTANTS
 * #define LSR_INFINITY 				1000
 * #define LSR_EXT_HELLO 				DESSERT_EXT_USER
 * #define LSR_EXT_TC 				DESSERT_EXT_USER + 1
 * 
 * // DAEMON CONFIG
 * #define HELLO_INTERVAL				1500 	// milliseconds
 * #define TC_INTERVAL				4000 	// milliseconds
 * #define NH_REFRESH_INTERVAL		4000 	// milliseconds
 * #define RT_REFRESH_INTERVAL		5000 	// milliseconds
 * #define NH_ENTRY_AGE			    32
 * #define RT_ENTRY_AGE			    32
 * #define TTL_MAX 				    3
 * 
 * // PERIODICS
 * extern u_int16_t				    hello_interval;
 * extern u_int16_t 					tc_interval;
 * extern u_int16_t 					nh_refresh_interval;
 * extern u_int16_t 					rt_refresh_interval;
 * extern u_int16_t 					nh_entry_age;
 * extern u_int16_t 					rt_entry_age;
 * extern dessert_periodic_t *		periodic_send_hello;
 * extern dessert_periodic_t *		periodic_send_tc;
 * extern dessert_periodic_t *		periodic_refresh_nh;
 * extern dessert_periodic_t *		periodic_refresh_rt;
 * 
 * // FUNCTIONS FROM des-lsr_routingLogic.c
 * void init_logic();
 * dessert_per_result_t send_hello(void *data, struct timeval *scheduled, struct timeval *interval);
 * dessert_per_result_t send_tc(void *data, struct timeval *scheduled, struct timeval *interval);
 * dessert_per_result_t refresh_list();
 * 
 * void init_rt();
 * dessert_per_result_t refresh_rt();
 * 
 * // FUNCTIONS FROM des-lsr_packetHandler.c
 * int sys_to_mesh(dessert_msg_t *msg, size_t len, dessert_msg_proc_t *proc, dessert_sysif_t *sysif, dessert_frameid_t id);
 * 
 * int drop_errors(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id);
 * int process_hello(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id);
 * int process_tc(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id);
 * int forward_packet(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id);
 * int mesh_to_sys(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id);
 * 
 * // FUNCTIONS FROM des-lsr_cli.c
 * int cli_set_hello_interval(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_show_hello_interval(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_set_tc_interval(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_show_tc_interval(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_set_refresh_list(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_show_refresh_list(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_set_refresh_rt(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_show_refresh_rt(struct cli_def* cli, char* command, char* argv[], int argc);
 * int cli_show_rt(struct cli_def* cli, char* command, char* argv[], int argc);
 * 
 * // FUNCTIONS FROM des-lsr_dijkstra.c
 * void shortest_path(uint8_t *addr);
 * @endcode
 *
 * This header file is included by all other project files.
 * Therefore we include the dessert header, so that the functions can be used in our whole project.
 * As you can see we declare some callbacks from des-lsr_packethandler.c, des-lsr_routinglogic.c, des-lsr_cli.c and des-lsr_dijkstra to make them globally available.
 * LSR_TTL_DEFAULT is simply the standard value for tc packets flooded through the network.
 * We also define several constants, that will be used in the routing table and the neighborhood list.
 *
 * @section sec_fs_rlogic_deslsritemsh Explaining the code - des-lsr_items.h
 *
 * In this header file you can find the data structures.
 * The neighboring list node_neighbors_t only has the hardware address of the neighbor, the weight of the link to the neighbor and the entry age, which simply is a decreasing number indicating how old the entry is.
 * When the number gets 0 or negative, the entry should be deleted.
 * The all_nodes_t struct is used as a routing table.
 * This data structure will contain all known nodes in the network, will have a next hop address to reach this destination, an entry age as in the neighborhood list, a sequence number to prevent looping packets, a distance to the destination and an integer indicating, whether this link was visited (used in the dijkstra algorithm for shortest path determination).
 * In the all_nodes_t struct any node is listed, in the node_neighbours_t only its neighbors.
 *
 * @code
 * #include <dessert.h>
 * #include <uthash.h>
 * #include "des-lsr.h"
 * 
 * #define INFINITY 200
 * 
 * // DATABASE
 * // a hashmap for all neighbours of a node
 * typedef struct node_neighbors {
 * 	u_int8_t addr[ETH_ALEN];
 * 	u_int8_t entry_age;
 * 	u_int8_t weight;
 * 	UT_hash_handle hh;
 * } __attribute__((__packed__)) node_neighbors_t;
 * extern node_neighbors_t *dir_neighbors_head;
 * 
 * // a hashmap for all nodes
 * typedef struct all_nodes {
 * 	u_int8_t addr[ETH_ALEN];
 * 	u_int8_t next_hop[ETH_ALEN];
 * 	u_int8_t prev_hop[ETH_ALEN];
 * 	u_int8_t entry_age;
 * 	u_int8_t seq_nr;
 * 	u_int8_t distance;
 * 	u_int8_t visited;
 * 	node_neighbors_t* neighbors;
 * 	UT_hash_handle hh;
 * } all_nodes_t;
 * extern all_nodes_t *all_nodes_head;
 * 
 * // EXTENSIONS
 * typedef struct  hello_ext {
 * } __attribute__((__packed__)) hello_ext_t;
 * @endcode
 *
 * @section sec_fs_rlogic_deslsrphc Explaining the code - des-lsr_packethandler.c
 *
 * In the des-lsr_packethandler.c only two callbacks are located. The sys_to_mesh function processes packets going to the mesh network to other mesh routers. In the mesh_to_sys function the packets were sent from other mesh router.
 *
 * The sys_to_mesh function sends a generated packet to the right next hop, therefore it has to use the next hop information from the routing table.
 * The mesh_to_sys callback just checks whether the incoming packet is a broadcast or multicast message, then it should resend this message.
 * For sending we use the dessert_meshsend_fast function, which simply sends the message without creating a copy of it.
 *
 * @code
 * #include "des-lsr.h"
 * #include "des-lsr_items.h"
 * 
 * int sys_to_mesh(dessert_msg_t *msg, size_t len, dessert_msg_proc_t *proc, dessert_sysif_t *sysif, dessert_frameid_t id) {
 *         struct ether_header* l25h = dessert_msg_getl25ether(msg);               // ptr to l2.5 header
 *         all_nodes_t* node;
 *         HASH_FIND(hh, all_nodes_head, l25h->ether_dhost, ETH_ALEN, node);       // finding destination of msg in hashmap
 * 
 *         // if destination and next hop for destination is known
 *         if (node && memcmp(node->next_hop, ether_broadcast, ETH_ALEN) != 0) {
 *                 memcpy(msg->l2h.ether_dhost, node->next_hop, ETH_ALEN);
 *                 dessert_meshsend_fast(msg, NULL);
 *         }
 * 
 *     return DESSERT_MSG_DROP;
 * }
 * 
 * int mesh_to_sys(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id) {
 *         if((proc->lflags & DESSERT_RX_FLAG_L25_DST && !(proc->lflags & DESSERT_RX_FLAG_L25_OVERHEARD))
 *                         || proc->lflags & DESSERT_RX_FLAG_L25_BROADCAST
 *                         || proc->lflags & DESSERT_RX_FLAG_L25_MULTICAST ) {
 *                 dessert_syssend_msg(msg);
 *         }
 * 
 *         return DESSERT_MSG_DROP;
 * }
 * @endcode
 *
 * @section sec_fs_rlogic_deslsrrlc Explaining the code - des-lsr_routingLogic.c
 *
 * The init_logic function is called in the main function of our project.
 * The important periodics as sending hello packets or sending tc packets are registered.
 * Remember: in the link state routing every router periodically sends hello and topology change information to other routers.
 *
 * @code
 * void init_logic() {
 * 	// registering periodic for HELLO packets
 * 	struct timeval hello_interval_t;
 * 	hello_interval_t.tv_sec = hello_interval / 1000;
 * 	hello_interval_t.tv_usec = (hello_interval % 1000) * 1000;
 * 	periodic_send_hello = dessert_periodic_add(send_hello, NULL, NULL, &hello_interval_t);
 * 
 * 	// registering periodic for TC packets
 * 	struct timeval tc_interval_t;
 * 	tc_interval_t.tv_sec = tc_interval / 1000;
 * 	tc_interval_t.tv_usec = (tc_interval % 1000) * 1000;
 * 	periodic_send_tc = dessert_periodic_add(send_tc, NULL, NULL, &tc_interval_t);
 * 
 * 	// registering periodic for refreshing neighboring list
 * 	struct timeval refresh_neighbor_t;
 * 	refresh_neighbor_t.tv_sec = nh_refresh_interval / 1000;
 * 	refresh_neighbor_t.tv_usec = (nh_refresh_interval % 1000) * 1000;
 * 	periodic_refresh_nh = dessert_periodic_add(refresh_list, NULL, NULL, &refresh_neighbor_t);
 * 
 * 	// registering periodic for refreshing routing table
 * 	struct timeval refresh_rt_t;
 * 	refresh_rt_t.tv_sec = rt_refresh_interval / 1000;
 * 	refresh_rt_t.tv_usec = (rt_refresh_interval % 1000) * 1000;
 * 	periodic_refresh_rt = dessert_periodic_add(refresh_rt, NULL, NULL, &refresh_rt_t);
 * }
 * @endcode
 *
 * In the send_hello function, a hello packet is sent out to all direct neighbours.
 * The send_tc function is used to flood the own neighborhood list through the network.
 * Therefore all neighborhood list entries has to be copied into the extension with their entry age (not necessary) and their link weight.
 *
 * @code
 * dessert_per_result_t send_tc(void *data, struct timeval *scheduled, struct timeval *interval) {
 * 	pthread_rwlock_wrlock(&pp_rwlock);
 * 	if (HASH_COUNT(dir_neighbors_head) == 0) {
 * 		return 0;
 * 	}
 * 
 * 	dessert_msg_t *tc;
 * 	dessert_msg_new(&tc);
 * 	tc->ttl = TTL_MAX;
 * 	tc->u8 = ++tc_seq_nr;
 * 
 * 	// delete old entries from NH list
 * 	node_neighbors_t *dir_neigh = dir_neighbors_head;
 * 	while (dir_neigh) {
 * 		if (dir_neigh->entry_age-- == 0) {
 * 			node_neighbors_t* el_to_delete = dir_neigh;
 * 			HASH_DEL(dir_neighbors_head, el_to_delete);
 * 			free(el_to_delete);
 * 		}
 * 		dir_neigh = dir_neigh->hh.next;
 * 	}
 * 
 * 	// add TC extension
 * 	dessert_ext_t *ext;
 * 	uint8_t ext_size = 1 + ((sizeof(node_neighbors_t)- sizeof(dir_neighbors_head->hh)) * HASH_COUNT(dir_neighbors_head));
 * 	dessert_msg_addext(tc, &ext, LSR_EXT_TC, ext_size);
 * 	void* tc_ext = ext->data;
 * 	memcpy(tc_ext, &(ext_size), 1);
 * 	tc_ext++;
 * 
 * 	// copy NH list into extension
 * 	dir_neigh = dir_neighbors_head;
 * 	while (dir_neigh) {
 * 		memcpy(tc_ext, dir_neigh->addr, ETH_ALEN);
 * 		tc_ext += ETH_ALEN;
 * 		memcpy(tc_ext, &(dir_neigh->entry_age), 1);
 * 		tc_ext++;
 * 		memcpy(tc_ext, &(dir_neigh->weight), 1);
 * 		tc_ext++;
 * 		dir_neigh = dir_neigh->hh.next;
 * 	}
 * 
 * 	// add l2.5 header
 * 	dessert_msg_addext(tc, &ext, DESSERT_EXT_ETH, ETHER_HDR_LEN);
 * 	struct ether_header* l25h = (struct ether_header*) ext->data;
 * 	memcpy(l25h->ether_shost, dessert_l25_defsrc, ETH_ALEN);
 * 	memcpy(l25h->ether_dhost, ether_broadcast, ETH_ALEN);
 * 
 * 	dessert_meshsend_fast(tc, NULL);
 * 	dessert_msg_destroy(tc);
 * 	pthread_rwlock_unlock(&pp_rwlock);
 * 	return 0;
 * }
 * @endcode
 * 
 * The refresh_list function checks, whether the entry_age is at 0 or negative, indicating that no hello packets from this neighbor were received recently.
 * This means, that this neighbor has no link to the current node anymore.
 *
 * @code
 * dessert_per_result_t refresh_list(void *data, struct timeval *scheduled, struct timeval *interval) {
 * 	pthread_rwlock_wrlock(&pp_rwlock);
 * 	node_neighbors_t *neighbor = dir_neighbors_head;
 * 	while (neighbor) {
 * 		if (neighbor->entry_age-- == 0) {
 * 			node_neighbors_t* el_to_delete = neighbor;
 * 			HASH_DEL(dir_neighbors_head, el_to_delete);
 * 			free(el_to_delete);
 * 		} else {
 * 			neighbor->weight = 1;
 * 		}
 * 		neighbor = neighbor->hh.next;
 * 	}
 * 	pthread_rwlock_unlock(&pp_rwlock);
 * 	return 0;
 * }
 * @endcode
 *
 * The refresh_rt function deletes all old routing table entries and calculated new shortest paths to the containing nodes with the dijkstra shortest path algorithm.
 * The shortest path calculation is not done directly by this function, but by calling shortest_path(dessert_l25_defsrc), which is a function from des-lsr_dijkstra.c
 *
 * @code
 * dessert_per_result_t refresh_rt(void *data, struct timeval *scheduled, struct timeval *interval) {
 * 	pthread_rwlock_wrlock(&pp_rwlock);
 * 	all_nodes_t *node = all_nodes_head;
 * 
 * 	while (node) {
 * 		if (node->entry_age-- == 0) {
 * 			all_nodes_t* el_to_delete = node;
 * 			HASH_DEL(all_nodes_head, el_to_delete);
 * 			free(el_to_delete);
 * 		}
 * 
 * 		dessert_info("RT ENTRY " MAC " | Seqnr = %d | EntryAge = %d",
 * 			node->addr[0], node->addr[1], node->addr[2], node->addr[3],
 * 			node->addr[4], node->addr[5], node->seq_nr, node->entry_age);
 * 		node = node->hh.next;
 * 	}
 * 
 * 	// DIJKSTRA
 * 	if (all_nodes_head) {
 * 		// add self into RT
 * 		node = malloc(sizeof(all_nodes_t));
 * 		memcpy(node->addr, dessert_l25_defsrc, ETH_ALEN);
 * 		node->entry_age = RT_ENTRY_AGE;
 * 		node->neighbors = dir_neighbors_head;
 * 		HASH_ADD_KEYPTR(hh, all_nodes_head, node->addr, ETH_ALEN, node);
 * 
 * 		// calculate shortest paths from self to all other in RT
 * 		shortest_path(dessert_l25_defsrc);
 * 
 * 		// delete self from RT
 * 		HASH_DEL(all_nodes_head, node);
 * 		free(node);
 * 	}
 * 
 * 	pthread_rwlock_unlock(&pp_rwlock);
 * 	return 0;
 * }
 * @endcode
 *
 * The callback pipeline contains functions that are called to precess incoming packets.
 * The drop_errors function drops packets, which are sent out and come back due to flooding.
 *
 * @code
 * int drop_errors(dessert_msg_t* msg, size_t len,	dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id){
 * 	if (proc->lflags & DESSERT_LFLAG_PREVHOP_SELF) return DESSERT_MSG_DROP;
 * 	if (proc->lflags & DESSERT_LFLAG_SRC_SELF) return DESSERT_MSG_DROP;
 * 	dessert_info("dropping packets sent to myself");
 * 	return DESSERT_MSG_KEEP;
 * }
 * @endcode
 *
 * After a hello message has been received, the process_hello function will check, whether the sender already is in the neighboring list.
 * If so, refresh the entry_age of this entry.
 * If the sender is not already in the neighborhood list, add the new neighbor.
 *
 * @code
 * int process_hello(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id) {
 * 	dessert_ext_t *ext;
 * 
 * 	if(dessert_msg_getext(msg, &ext, LSR_EXT_HELLO, 0)) {
 * 		pthread_rwlock_wrlock(&pp_rwlock);
 * 		struct ether_header* l25h = dessert_msg_getl25ether(msg);
 * 		node_neighbors_t *neighbor = malloc(sizeof(node_neighbors_t));
 * 		HASH_FIND(hh, dir_neighbors_head, l25h->ether_shost, ETH_ALEN, neighbor);
 * 		if (neighbor) {
 * 			neighbor->entry_age = NH_ENTRY_AGE;
 * 		} else {
 * 			neighbor = malloc(sizeof(node_neighbors_t));
 * 			memcpy(neighbor->addr, l25h->ether_shost, ETH_ALEN);
 * 			neighbor->entry_age = NH_ENTRY_AGE;
 * 			neighbor->weight = 1;
 * 			HASH_ADD_KEYPTR(hh, dir_neighbors_head, neighbor->addr, ETH_ALEN, neighbor);
 * 		}
 * 		pthread_rwlock_unlock(&pp_rwlock);
 * 		return DESSERT_MSG_DROP;
 * 	}
 * 
 * 	return DESSERT_MSG_KEEP;
 * }
 * @endcode
 * 
 * The process_tc function first checks whether the sender of the tc message already is in the local all-node-list.
 * If the node is not in the data structure, we create an entry for it.
 * Thereafter we add all its neighbors to the local routing table.
 * 
 * @code
 * int process_tc(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id) {
 * 	pthread_rwlock_wrlock(&pp_rwlock);
 * 	dessert_ext_t *ext;
 * 
 * 	if(dessert_msg_getext(msg, &ext, LSR_EXT_TC, 0)){
 * 		all_nodes_t *node = malloc(sizeof(all_nodes_t));
 * 		node_neighbors_t *neighbor = malloc(sizeof(node_neighbors_t));
 * 		struct ether_header* l25h = dessert_msg_getl25ether(msg);
 * 		void* tc_ext = (void*) ext->data;
 * 		uint8_t ext_size;
 * 		uint8_t addr[ETH_ALEN];
 * 		uint8_t entry_age;
 * 		uint8_t weight;
 * 
 * 		// if node is not in RT, add the node
 * 		HASH_FIND(hh, all_nodes_head, l25h->ether_shost, ETH_ALEN, node);
 * 		if (!node) {
 * 			node = malloc(sizeof(all_nodes_t));
 * 			memcpy(node->addr, l25h->ether_shost, ETH_ALEN);
 * 			node->entry_age = RT_ENTRY_AGE;
 * 			node->seq_nr = msg->u8;
 * 			HASH_ADD_KEYPTR(hh, all_nodes_head, node->addr, ETH_ALEN, node);
 * 		}
 * 
 * 		// if node is in RT, extract information from TC and add NH
 * 		memcpy(&ext_size, tc_ext, 1);
 * 		tc_ext++;
 * 		while (ext_size-1 > 0) {
 * 			memcpy(addr, tc_ext, ETH_ALEN);
 * 			ext_size -= ETH_ALEN;
 * 			tc_ext += ETH_ALEN;
 * 			memcpy(&entry_age, tc_ext, 1);
 * 			ext_size--;
 * 			tc_ext++;
 * 			memcpy(&weight, tc_ext, 1);
 * 			ext_size--;
 * 			tc_ext++;
 * 			HASH_FIND(hh, all_nodes_head, l25h->ether_shost, ETH_ALEN, node);
 * 			if (node){
 * 				if (node->seq_nr <= msg->u8) {
 * 					node->entry_age = RT_ENTRY_AGE;
 * 					node->seq_nr = msg->u8;
 * 
 * 					// add NH to RT
 * 					HASH_FIND(hh, node->neighbors, addr, ETH_ALEN, neighbor);
 * 					if (neighbor) {
 * 						neighbor->entry_age = entry_age;
 * 						neighbor->weight = weight;
 * 					} else {
 * 						neighbor = malloc(sizeof(node_neighbors_t));
 * 						memcpy(neighbor->addr, addr, ETH_ALEN);
 * 						neighbor->entry_age = entry_age;
 * 						neighbor->weight = weight;
 * 						HASH_ADD_KEYPTR(hh, node->neighbors, neighbor->addr, ETH_ALEN, neighbor);
 * 					}
 * 				}
 * 			}
 * 		}
 * 
 * 		dessert_meshsend_fast_randomized(msg);	// resend TC packet
 * 		pthread_rwlock_unlock(&pp_rwlock);
 * 		return DESSERT_MSG_DROP;
 * 	}
 * 
 * 	pthread_rwlock_unlock(&pp_rwlock);
 * 	return DESSERT_MSG_KEEP;
 * }
 * @endcode
 *
 * The forward_packet function forwards the packet to the right destination by looking up the next hop information from the routing table.
 *
 * @code
 * int forward_packet(dessert_msg_t* msg, size_t len, dessert_msg_proc_t *proc, const dessert_meshif_t *iface, dessert_frameid_t id) {
 * 	// if current node is the destination of the message but message is not for the current node
 * 	if (memcmp(dessert_l25_defsrc, msg->l2h.ether_dhost, ETH_ALEN) == 0 && !(proc->lflags & DESSERT_RX_FLAG_L25_DST)) {
 * 		all_nodes_t* node;
 * 		HASH_FIND(hh, all_nodes_head, msg->l2h.ether_dhost, ETH_ALEN, node);
 * 
 * 		if (node && memcmp(node->next_hop, ether_broadcast, ETH_ALEN) != 0) {
 * 			memcpy(msg->l2h.ether_dhost, node->next_hop, ETH_ALEN);
 * 			dessert_meshsend_fast(msg, NULL);
 * 		}
 * 
 * 		return DESSERT_MSG_DROP;
 * 	}
 * 
 * 	return DESSERT_MSG_KEEP;
 * }
 * @endcode
 *
 *
 * @section sec_fs_rlogic_deslsrdij Explaining the code - des-lsr_dijkstra.h
 * 
 * The shortest_path function simply calculates the shortest path of a given addr to all other nodes in the routing table using the dijkstra shortest path algorithm.
 * The other functions in this file only are helper functions.
 *
 * @code
 * void shortest_path (uint8_t *addr) {
 * 	if (!all_nodes_head) {
 * 		return;
 * 	}
 * 
 * 	all_nodes_t *node = find_addr(addr);
 * 	all_nodes_t *current = all_nodes_head;
 * 	node_neighbors_t *current_neighbors;
 * 	all_nodes_t *ptr = all_nodes_head;
 * 
 * 	// Part I
 * 	// set all nodes as unvisited, distance to infinity and prev hop to broadcast
 * 	while (current) {
 * 		current->visited = 0;
 * 		current->distance = INFINITY;
 * 		memcpy(current->prev_hop, ether_broadcast, ETH_ALEN * sizeof(u_int8_t));
 * 		memcpy(current->next_hop, ether_broadcast, ETH_ALEN * sizeof(u_int8_t));
 * 		current = current->hh.next;
 * 	}
 * 
 * 	// Part II
 * 	// set distance of start node to 0 and prev to itself
 * 	node->distance = 0;
 * 	memcpy(node->prev_hop, node->addr, ETH_ALEN * sizeof(u_int8_t));
 * 	memcpy(node->next_hop, node->addr, ETH_ALEN * sizeof(u_int8_t));
 * 
 * 	// Part III
 * 	// while there are some unvisited nodes
 * 	while (!check_visited()) {
 * 		// set unvisited node with lowest distance as current and visited
 * 		current = get_low_unvisit_dist();
 * 		current->visited = 1;
 * 
 * 		// for all unvisited neighbors of current
 * 		current_neighbors = current->neighbors;
 * 		while (current_neighbors) {
 * 			ptr = find_addr(current_neighbors->addr);
 * 
 * 			// if old distance is larger then new; overwrite and set current to prev hop
 * 			if (ptr) {
 * 				if (current->distance + current_neighbors->weight < ptr->distance) {
 * 					ptr->distance = current->distance + current_neighbors->weight;
 * 					memcpy(ptr->prev_hop, current->addr, ETH_ALEN * sizeof(u_int8_t));
 * 				}
 * 			}
 * 			current_neighbors = current_neighbors->hh.next;
 * 		}
 * 	}
 * 
 * 	// PART IV
 * 	// find next_hops for all nodes (go routing tree back to source)
 * 	node = all_nodes_head;
 * 	while (node) {
 * 		if (memcmp(node->addr, addr, ETH_ALEN * sizeof(int))) {
 * 			ptr = find_addr(node->prev_hop);
 * 			if (memcmp(node->prev_hop, ether_broadcast, ETH_ALEN)) {
 * 				while (memcmp(ptr->prev_hop, addr, ETH_ALEN * sizeof(u_int8_t))) {
 * 					ptr = find_addr(ptr->prev_hop);
 * 				}
 * 				memcpy(node->next_hop, ptr->addr, ETH_ALEN * sizeof(u_int8_t));
 * 			}
 * 		}
 * 		node = node->hh.next;
 * 	}
 * }
 * 
 * @endcode
 * 
 * @section sec_fs_rlogic_deslsrcli Explaining the code - des-lsr_cli.h
 * 
 * The functions in des-lsr_cli.h are for printing and setting values in the command line interface, that can be accessed via telnet connection.
 * The functions are really the same, therefore only two examples are shown here:
 *
 * @code
 * int cli_set_hello_interval(struct cli_def *cli, char *command, char *argv[], int argc) {
 * 	if(argc != 1) {
 * 		cli_print(cli, "usage %s [interval]\n", command);
 * 		return CLI_ERROR;
 * 	}
 * 
 * 	hello_interval = (u_int16_t) strtoul(argv[0], NULL, 10);
 * 	dessert_periodic_del(periodic_send_hello);
 * 	struct timeval hello_interval_t;
 * 	hello_interval_t.tv_sec = hello_interval / 1000;
 * 	hello_interval_t.tv_usec = (hello_interval % 1000) * 1000;
 * 	periodic_send_hello = dessert_periodic_add(send_hello, NULL, NULL, &hello_interval_t);
 * 	dessert_notice("setting HELLO interval to %d ms\n", hello_interval);
 *     return CLI_OK;
 * }
 * 
 * int cli_show_hello_interval(struct cli_def *cli, char *command, char *argv[], int argc) {
 * 	cli_print(cli, "HELLO interval = %d ms\n", hello_interval);
 *     return CLI_OK;
 * }
 * @endcode
 * 
 * The cli_set_hello_interval function needs a new interval to change the old one, else an error is shown on the command line.
 * Because of the fact, that the interval is used for the periodic function send_hello, the old periodic has to be deleted to add a new one with the new interval between two hello packets.
 * The cli_show_hello_interval just prints the current hello interval and returns.
 */
