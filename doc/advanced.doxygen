/**
 * \ingroup Manual
 * \addtogroup AdvTopics
 *
 * This module provides information on advanced topics. It is recommanded to read the other manual modules before starting here. Here you can find the following parts:
 *
 * - \ref sec_adv_cli
 * - \ref sec_adv_tun
 * - \ref sec_adv_compat
 * - \ref sec_ifaces_rm
 * - \ref sec_packetfilter
 * - \ref sec_tokenbucket
 * - <a href="http://code.google.com/p/libcli/wiki/DevelopersReference">Using CLI passwords</a>
 * - \ref sec_didntlearn
 *
 * @section sec_adv_cli Custom CLI Commands
 *
 * How to add custom CLI commands will be explain using the following example scenario: Consider you have a routing daemon that uses the parameter <i>threshold</i> with a value in [0,1]. The value shall be configurable via the CLI.
 *
 * First of all, we create a "set" CLI anchor. This means all commands that are registered with this anchor have to be prefixed by the word "set" when entered in the CLI. As setting options is a critical task, it should only be allowed in the privileged mode.
 *
 * @code
 * struct cli_command *cli_cfg_set;
 * cli_cfg_set = cli_register_command(dessert_cli, NULL, "set", NULL, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set variable");
 * @endcode
 *
 * The following function can be used to parse the value specified in the CLI and set the threshold if it is valid. Our "set threshold option" in the cli gets only a parameter, which is a floating number between 0 and 1.
 *
 * As you can see we simply check, whether the given input is correct. In other words: whether we only have one parameter and whether it is a number between 0 and 1. Then we put the value of the threshold in our daemon to the new one.
 *
 * @code
 * double threshold = 0;
 *
 * int set_threshold(struct cli_def *cli, char *command, char *argv[], int argc) {
 *     double d;
 *
 *     if (argc != 1) {
 *         cli_print(cli, "usage %s [float]\n", command);
 *         return CLI_ERROR;
 *     }
 *
 *     d = strtod(argv[0], NULL);
 *
 *     if (d <= 0 || d >= 1) {
 *         cli_print(cli, "threshold must be in [0,1]\n");
 *         return CLI_ERROR;
 *     }
 *
 *     threshold = d;
 *     dessert_info("setting threshold to %f", threshold);
 *     return CLI_OK;
 * }
 * @endcode
 *
 * If you want to implement a flexible code, you should use many cli commands. It gives your the oppertunity to change your daemon without stopping and recompiling it. Think of a function which prints the current routing table. You could see in the runtime of your daemon to which other nodes a route is selected. There are a few operations for that cli commands should be implemented:
 *
 * - setting routing protocol specific values (threshold, link metric, hello interval, etc.)
 * - printing the routing table
 * - enabling and disabling debugging messages
 * - saving the current configuration
 *
 * If you want to use your function respectively use the cli with the new operation you have to register your function as a child of the set anchor which we discussed earlier.
 *
 * @code
 *  cli_register_command(dessert_cli, cli_cfg_set, "threshold", set_threshold, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "set threshold");
 * @endcode
 *
 * When you have compiled and started the daemon, connect with telnet (\ref sec_usage_telnet). You can now set the threshold value in the privileged mode as follow.
 *
 * @code
 *  set threshold 0.4
 * @endcode
 *
 * @section sec_adv_tun Using TUN Interfaces
 *
 * You can replace the TAP interface used in the \ref ExampleDaemon "example" of this manual by a TUN interface. Remember: Packets received or sent via a TUN interface are IPv4/IPv6 datagrams. You have to register the dessert_cli_cmd_addsysif_tun() instead of dessert_cli_cmd_addsysif() for the CLI to register a TUN interface. Here you can see how this would look like:
 *
 * @code
 * cli_register_command(dessert_cli, dessert_cli_cfg_iface, "sys", dessert_cli_cmd_addsysif_tun, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "initialize sys interface");
 * cli_register_command(dessert_cli, dessert_cli_cfg_iface, "mesh", dessert_cli_cmd_addmeshif_tun, PRIVILEGE_PRIVILEGED, MODE_CONFIG, "initialize mesh interface");
 * @endcode
 *
 * Your code should not contain any ethernet specific parts as raw IP datagrams are received over TUN interfaces.
 *
 * @section sec_adv_compat TUN/TAP Compatibility
 *
 * To achieve compatibility between the two different sys interface types, it is best to use dessert_syssend_msg() instead of dessert_syssend() as this function will determine what packet was encapsulated.
 *
 * @code
 * dessert_syssend_msg(msg);
 * @endcode
 *
 * As you can see the dessert_syssend_msg() funciton only gets one argument. Now you dont use the ethernet packet as a parameter, but the DES-SERT messsage. If there is an DES-SERT ethernet extension, the frame will be reconstructed and if the extension is missing, it only handles the IP datagram. In both cases the packet is send to the kernel.
 *
 * When implementing routing protocols you should only rely on the layer 3 address for your path selection to achieve compatibility. The Ethernet extension should be ignored.
 *
 * @section sec_ifaces_rm Removing Registered Interfaces
 *
 * You can remove interfaces registered as mesh or sys interface with the following functions.
 *
 * @code
 * int dessert_meshif_del(const char* dev);
 * int dessert_sysrxcb_del(dessert_sysrxcb_t* c);
 * @endcode
 *
 * @section sec_packetfilter Setting up a Packet Filter
 * 
 * A packet filter inspects the incoming packets.
 * According to the rules of the packet filter, an incoming packet may be dropped or accepted.
 * The stateless filter only is packet based and pays no attention to whether a packet is part of an existing stream of traffic.
 * 
 * To show all active paket filter rules type in the following command in the CLI of the daemon:
 * 
 * @code
 * show rules
 * @endcode
 * 
 * The following output is an example:
 * 
 * @code
 * # show rules
 * [accept]
 * #                  MAC           meshif          p
 * 0    fe:fe:fe:fe:fe:fe             eth1      0.300
 * 
 * [drop]
 * #                  MAC           meshif          p
 * 
 * [default]: accept
 * @endcode
 * 
 * To create new rules, the following command should be used:
 * 
 * @code
 * # rule add
 * usage: rule add [accept|drop] [MAC] [MESHIF] [PROBABILITY]
 * @endcode
 * 
 * This will add an accept or drop rule of incoming packets received from the given MAC address at the interface MESHIF with a given PROBABILITY.
 * 
 * Dually, a rule can be removed by typing in the following command:
 * 
 * @code
 * # rule rm
 * usage: rule rm [accept|drop] [MAC] [MESHIF]
 * @endcode
 * 
 * Rules for an incoming frame are checked in the following order:
 * 
 * - 1) whitelist (accept)
 * - 2) blacklist (drop)
 * - 3) default rule
 * 
 * When both accept and dropping rules do not match the incoming frame, the default rule is used.
 * The default rule only specifies, whether such packet is accepted or dropped.
 * 
 * @code
 * # rule default
 * usage: rule default [accept|drop]
 * @endcode
 * 
 * @section sec_tokenbucket Setting up a TokenBucket
 * 
 * Based on the presence of tokens in the bucket, the token bucket dictates, when a certain traffic can be transmitted.
 * Therefore the bucket contains token units and each of them represent a unit of bytes.
 * Those tokens are removed when sending a packet according to the size of the packet.
 * If there are not tokens in the bucket anymore, no packets can be transmitted anymore until the token bucket gets enough tokens again.
 * Tokens are added into the bucket every xxx ms.
 * 
 * The current token bucket configuration of a daemon can be viewed by typing in the following commando to the CLI:
 * 
 * @code
 * # show tb
 * #       meshif                  size [B]              rate [B/s]              policy         queue length        state
 * 0         eth1      18446744073709551615                       0                drop             0/0          disabled
 * @endcode
 * 
 * This shows, that a token bucket is registered for a specific interface and has a given bucket size.
 * The rate indicates, with how much bytes per time unit the bucket is filled.
 * The bucket policy is used, when the size of the tokens is smaller then the next queued packet.
 * If the policy is set to drop, the next queued packet will be dropped.
 * Or the policy is set to queue_ordered, which means, that the next packet will not be dropped, but unfortunately cannot be send out.
 * If the policy is set to queue_unordered, the queue is searched for packets, that could fit the size of given tokens.
 * A token bucket also has a maximum queue length (packets), where 0 stands for unlimited.
 * To activate, deactivate or modify the token bucket, the following instruction can be used:
 * 
 * @code
 * # set tb
 * USAGE: set tb [MESHIF] [BUCKETSIZE (bytes)] [RATE (bytes/s)]
 * @endcode
 * 
 * To do so a token bucket has to be activated on a given mesh interface with a given bucket size and the bucket rate.
 * 
 * The policy of the token bucket can be changed by typing in the following:
 * 
 * @code
 * # set tb policy 
 * USAGE: set tb policy [MESHIF] [drop, queue_ordered, queue_unordered]
 * @endcode
 * 
 * This will modify the token bucket on a given mesh interface so that the policy becomes drop, queue_ordered or queue_unordered.
 *
 * The length of the queue can be changed with the following command:
 *
 * @code
 * # set tb queue_max 
 * USAGE: set tb queue_max [MESHIF] [MAX_LEN]
 * @endcode
 * 
 * @section sec_didntlearn What You Did Not Learn
 *
 * - Advanced Usage of the Processsing Buffer
 * - Retrieving DES-SERT extensions
 * - Writing Wireshark Dissectors
 * - Exporting OIDs via AgentX to an SNMP Agent
 */
